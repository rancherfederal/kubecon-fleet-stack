affinity: {}
annotations: {}
args: []
autoscaling:
  behavior: {}
  customRules: []
  enabled: false
  maxReplicas: 3
  minReplicas: 1
  targetCPUUtilizationPercentage: 75
command: []
config:
  customParsers: |
    [PARSER]
        Name docker_no_time
        Format json
        Time_Keep Off
        Time_Key time
        Time_Format %Y-%m-%dT%H:%M:%S.%L
  extraFiles: {}
  filters: |
    [FILTER]
        Name kubernetes
        Match kube.*
        Merge_Log On
        Keep_Log Off
        K8S-Logging.Parser On
        K8S-Logging.Exclude On
  inputs: |
    [INPUT]
        Name tail
        Path /var/log/containers/*.log
        multiline.parser docker, cri
        Tag kube.*
        Mem_Buf_Limit 5MB
        Skip_Long_Lines On

    [INPUT]
        Name systemd
        Tag host.*
        Systemd_Filter _SYSTEMD_UNIT=kubelet.service
        Read_From_Tail On
  outputs: |
    [OUTPUT]
        Name grafana-loki
        Match *
        Url http://loki.svc.mustafar.lol/loki/api/v1/push
        BatchWait 1s
        BatchSize 30720
        # (30KiB)
        Labels {test="fluent-bit-go", lang="Golang"}

  service: |
    [SERVICE]
        Daemon Off
        Flush {{ .Values.flush }}
        Log_Level {{ .Values.logLevel }}
        Parsers_File parsers.conf
        Parsers_File custom_parsers.conf
        HTTP_Server On
        HTTP_Listen 0.0.0.0
        HTTP_Port {{ .Values.metricsPort }}
        Health_Check On
  upstream: {}
daemonSetVolumeMounts:
- mountPath: /var/log
  name: varlog
- mountPath: /var/lib/docker/containers
  name: varlibdockercontainers
  readOnly: true
- mountPath: /etc/machine-id
  name: etcmachineid
  readOnly: true
daemonSetVolumes:
- hostPath:
    path: /var/log
  name: varlog
- hostPath:
    path: /var/lib/docker/containers
  name: varlibdockercontainers
- hostPath:
    path: /etc/machine-id
    type: File
  name: etcmachineid
dashboards:
  annotations: {}
  enabled: false
  labelKey: grafana_dashboard
  namespace: ""
dnsConfig: {}
dnsPolicy: ClusterFirst
env: []
envFrom: []
envWithTpl: []
existingConfigMap: ""
extraContainers: []
extraPorts: []
extraVolumeMounts: []
extraVolumes: []
flush: 1
fullnameOverride: ""
hostAliases: []
hostNetwork: false
image:
  pullPolicy: Always
  repository: cr.fluentbit.io/fluent/fluent-bit
  tag: ""
imagePullSecrets: []
ingress:
  annotations: {}
  className: ""
  enabled: false
  extraHosts: []
  hosts: []
  tls: []
initContainers: []
kind: DaemonSet
labels: {}
lifecycle: {}
livenessProbe:
  httpGet:
    path: /
    port: http
logLevel: info
luaScripts: {}
metricsPort: 2020
nameOverride: ""
networkPolicy:
  enabled: false
nodeSelector: {}
openShift:
  enabled: false
  securityContextConstraints:
    annotations: {}
    create: true
podAnnotations: {}
podDisruptionBudget:
  annotations: {}
  enabled: false
  maxUnavailable: 30%
podLabels: {}
podSecurityContext: {}
podSecurityPolicy:
  annotations: {}
  create: false
priorityClassName: ""
prometheusRule:
  enabled: false
rbac:
  create: true
  nodeAccess: false
readinessProbe:
  httpGet:
    path: /api/v1/health
    port: http
replicaCount: 1
resources: {}
securityContext: {}
service:
  annotations: {}
  labels: {}
  port: 2020
  type: ClusterIP
serviceAccount:
  annotations: {}
  create: true
  name: null
serviceMonitor:
  enabled: false
testFramework:
  image:
    pullPolicy: Always
    repository: busybox
    tag: latest
tolerations: []
updateStrategy: {}
volumeMounts:
- mountPath: /fluent-bit/etc/fluent-bit.conf
  name: config
  subPath: fluent-bit.conf
- mountPath: /fluent-bit/etc/custom_parsers.conf
  name: config
  subPath: custom_parsers.conf